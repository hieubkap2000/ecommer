/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/admin/post.js":
/*!************************************!*\
  !*** ./resources/js/admin/post.js ***!
  \************************************/
/***/ (() => {

eval("$(function () {\n  var url = \"post/getAll\";\n  var columns = [{\n    data: \"DT_RowIndex\"\n  }, {\n    data: \"thumbnail\",\n    render: function render(data, type, full, meta) {\n      return '<img src=\"' + data + '\" height=\"40\"/>';\n    }\n  }, {\n    data: \"title\"\n  }, {\n    data: \"category_name\"\n  }, {\n    data: \"date_of_publication\"\n  }, {\n    data: \"sort_order\"\n  }, {\n    data: \"status\"\n  }, {\n    data: \"name\"\n  }, {\n    data: \"edit\"\n  }, {\n    data: \"detele\"\n  }];\n  initDatatables(url, columns); //<---bootstrap-switch--->//\n\n  $(\"input[data-bootstrap-switch]\").each(function () {\n    $(this).bootstrapSwitch(\"state\", $(this).prop(\"checked\"));\n  });\n});\nvar urlSave = \"\";\n\nwindow.insert = function () {\n  resetValue(); // remove image preview\n\n  $(\"#holder img\").remove(); // set url save data\n\n  urlSave = \"post/store\"; // reset form\n\n  $(\"#form\")[0].reset();\n};\n\nwindow.edit = function (id) {\n  resetValue(); // remove image preview\n\n  $(\"#holder img\").remove(); //set url save data\n\n  urlSave = \"post/update/\".concat(id); // call ajax, get info\n\n  $.ajax({\n    url: \"post/edit/\".concat(id),\n    type: \"GET\",\n    success: function success(data) {\n      console.log(data);\n      $(\"#title\").val(data.post.title);\n      $(\"#slug\").val(data.post.slug);\n      $(\"#date\").val(data.post.date_of_publication);\n      $(\"#sort_order\").val(data.post.sort_order);\n      $(\"#thumbnail\").val(data.post.thumbnail);\n      $(\"#user_id\").val(data.post.user_id);\n      $(\"#holder\").append(\"<img src=\\\"\".concat(data.post.thumbnail, \"\\\" style=\\\"height: 5rem;\\\">\"));\n      CKEDITOR.instances[\"content\"].setData(data.post.content);\n      CKEDITOR.instances[\"summary\"].setData(data.post.summary); // set value category_selected\n\n      $(\".category\").append(new Option(data.post.category_name, data.post.category_id, true, true)).trigger(\"change\"); // set value tag_selected\n\n      $.each(data.tag, function (key, value) {\n        $(\".tag\").append(new Option(value.tag_name, value.id, true, true)).trigger(\"change\");\n      }); //set status\n\n      $(\"#status\").bootstrapSwitch(\"state\", data.post.status == \"on\", true);\n    },\n    error: function error(xhr) {\n      console.log(xhr);\n    }\n  });\n};\n\nwindow.save = function () {\n  $.ajax({\n    url: urlSave,\n    type: \"POST\",\n    dataSrc: \"\",\n    data: {\n      _token: $(\"#token\").val(),\n      title: $(\"#title\").val(),\n      slug: $(\"#slug\").val(),\n      thumbnail: $(\"#thumbnail\").val(),\n      date_of_publication: $(\"#date\").val(),\n      status: $(\"#status\").bootstrapSwitch(\"state\") ? \"on\" : \"off\",\n      sort_order: $(\"#sort_order\").val(),\n      user_id: $(\"#user_id\").val(),\n      summary: CKEDITOR.instances[\"summary\"].getData(),\n      content: CKEDITOR.instances[\"content\"].getData(),\n      tag_id: $(\".tag\").val(),\n      category_id: $(\".category\").val()\n    },\n    success: function success(data) {\n      $(\"#example1\").dataTable().api().ajax.reload();\n      Swal.fire(\"Đã lưu !\", \"Lưu bài viết thành công!\", \"success\");\n      $(\"#form\")[0].reset();\n      $(\"[data-dismiss=modal]\").trigger({\n        type: \"click\"\n      });\n    },\n    error: function error(xhr) {\n      $.each(xhr.responseJSON.errors, function (key, value) {\n        if (value.length >= 2) {\n          $.each(value, function (k, v) {\n            toastr[\"error\"](v);\n          });\n        } else {\n          toastr[\"error\"](value);\n        }\n      });\n    }\n  });\n};\n\nwindow.delele = function (id) {\n  Swal.fire({\n    title: \"Bạn có muốn xóa bài viết này không?\",\n    text: \"Bạn sẽ không thể khôi phục lại.\",\n    icon: \"warning\",\n    showCancelButton: true,\n    confirmButtonColor: \"#3085d6\",\n    cancelButtonColor: \"#d33\",\n    confirmButtonText: \"Xóa bài viết\",\n    cancelButtonText: \"Hủy\"\n  }).then(function (result) {\n    if (result.isConfirmed) {\n      $.ajax({\n        url: \"post/delete/\".concat(id),\n        type: \"GET\",\n        success: function success(data) {\n          $(\"#example1\").dataTable().api().ajax.reload();\n          Swal.fire(\"Đã xóa!\", \"Xóa bài viết thành công!\", \"success\");\n        },\n        error: function error() {\n          toastr[\"error\"](\"Xóa bài viết không thành công!\");\n        }\n      });\n    }\n  });\n}; //image file manager\n\n\n$(\"#lfm\").filemanager(\"image\"); //ckeditor\n\nvar options = {\n  filebrowserImageBrowseUrl: \"/laravel-filemanager?type=Images\",\n  filebrowserImageUploadUrl: \"/laravel-filemanager/upload?type=Images&_token=\",\n  filebrowserBrowseUrl: \"/laravel-filemanager?type=Files\",\n  filebrowserUploadUrl: \"/laravel-filemanager/upload?type=Files&_token=\"\n};\nCKEDITOR.replace(\"content\", options);\nCKEDITOR.replace(\"summary\", options); //Date picker\n\n$(\"#date_of_publication\").datetimepicker({\n  format: \"L\"\n}); //Load Category\n\nfunction valueSelect2() {\n  var CSRF_TOKEN = $('meta[name=\"csrf-token\"]').attr(\"content\");\n  $(\".category\").empty();\n  $(\".tag\").empty();\n  $(\".category\").select2({\n    ajax: {\n      url: \"post/get-search-category\",\n      type: \"POST\",\n      dataType: \"json\",\n      delay: 250,\n      data: function data(params) {\n        return {\n          _token: CSRF_TOKEN,\n          q: params.term,\n          // search term\n          page: params.current_page\n        };\n      },\n      processResults: function processResults(data, params) {\n        params.current_page = params.current_page || 1;\n        return {\n          results: data.data,\n          pagination: {\n            more: params.current_page * 30 < data.total\n          }\n        };\n      },\n      cache: true\n    },\n    templateResult: formatCategory,\n    templateSelection: formatCategorySelection\n  });\n\n  function formatCategory(category) {\n    if (category.loading) {\n      return category.text;\n    }\n\n    var $container = $(\"<div class='select2-result-category clearfix'>\" + \"<div class='select2-result-category__title'></div>\" + \"</div>\" + \"</div>\");\n    $container.find(\".select2-result-category__title\").text(category.category_name);\n    return $container;\n  }\n\n  function formatCategorySelection(category) {\n    return category.category_name || category.text;\n  }\n\n  $(\".tag\").select2({\n    tokenSeparators: [\",\"],\n    ajax: {\n      url: \"post/get-search-tag\",\n      type: \"POST\",\n      dataType: \"json\",\n      delay: 250,\n      data: function data(params) {\n        return {\n          _token: CSRF_TOKEN,\n          q: params.term,\n          // search term\n          page: params.current_page\n        };\n      },\n      processResults: function processResults(data, params) {\n        params.current_page = params.current_page || 1;\n        return {\n          results: data.data,\n          pagination: {\n            more: params.current_page * 30 < data.total\n          }\n        };\n      },\n      cache: true\n    },\n    templateResult: formatTag,\n    templateSelection: formatTagSelection\n  });\n\n  function formatTag(tag) {\n    if (tag.loading) {\n      return tag.text;\n    }\n\n    var $container = $(\"<div class='select2-result-tag clearfix'>\" + \"<div class='select2-result-tag__title'></div>\" + \"</div>\" + \"</div>\");\n    $container.find(\".select2-result-tag__title\").text(tag.tag_name);\n    return $container;\n  }\n\n  function formatTagSelection(tag) {\n    return tag.tag_name || tag.text;\n  }\n}\n\nfunction resetValue() {\n  //reset value select2\n  valueSelect2(); // remove image preview\n\n  $(\"#holder img\").remove(); //reset value ckeditor\n\n  CKEDITOR.instances[\"content\"].setData(\"\");\n  CKEDITOR.instances[\"summary\"].setData(\"\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/admin/post.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/admin/post.js"]();
/******/ 	
/******/ })()
;